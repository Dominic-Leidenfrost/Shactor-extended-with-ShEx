# SHACTOR Application Configuration Example
    # Copy this file to src/main/resources/application.properties and customize the paths for your environment

# Server Configuration
server.port=${PORT:8080}
logging.level.org.atmosphere = warn
spring.mustache.check-template-location = false

# Vaadin Configuration
vaadin.launch-browser=true
vaadin.whitelisted-packages = com.vaadin,org.vaadin,dev.hilla,com.example.application,com.vaadin,org.vaadin,com.storedobject
spring.jpa.defer-datasource-initialization = true

# Dataset Configuration
# Update these paths to match your local dataset locations

# LUBM-Mini dataset (for local development)
dataset.lubm.mini.path=./datasets/lubm-mini.nt

# DBpedia dataset
dataset.dbpedia.path=./datasets/dbpedia_ml.nt

# LUBM full dataset
dataset.lubm.path=./datasets/lubm.n3

# YAGO-4 dataset
dataset.yago.path=./datasets/yago.n3

# SPARQL Endpoint Configuration
# Configure your SPARQL endpoints - typically GraphDB or similar triple store

# Default endpoint (usually localhost for development)
sparql.endpoint.default.url=${SPARQL_ENDPOINT_URL:http://localhost:7200/}
sparql.endpoint.default.repository=${SPARQL_REPOSITORY:LUBM-ScaleFactor-1}

# Remote endpoint (if you have access to a remote GraphDB instance)
sparql.endpoint.remote.url=${SPARQL_REMOTE_URL:http://10.92.0.34:7200/}

# Repository Configuration for different datasets
# These should match the repository names in your GraphDB instance
repository.lubm.mini=${REPO_LUBM_MINI:LUBM-ScaleFactor-1}
repository.dbpedia=${REPO_DBPEDIA:DBPEDIA_ML}
repository.lubm=${REPO_LUBM:LUBM}
repository.yago=${REPO_YAGO:Yago_EngWiki}

# SETUP INSTRUCTIONS:
# 1. Copy this file to src/main/resources/application.properties
# 2. Update the dataset paths to point to your local dataset files
# 3. Update the SPARQL endpoint URLs to match your GraphDB installation
# 4. Update the repository names to match your GraphDB repositories
# 5. Optionally, set environment variables instead of editing this file directly

# PostProcessing Configuration
# Enable/disable post-processing fixes for turtle content formatting issues
# When enabled: Fixes NodeKind casing, decimal commas, and adds xsd:double datatypes
# When disabled: Original content is returned without modifications
shactor.postprocessing.enabled=${POSTPROCESSING_ENABLED:true}

# ENVIRONMENT VARIABLE EXAMPLES:
# export LUBM_MINI_PATH="/path/to/your/lubm-mini.nt"
# export SPARQL_ENDPOINT_URL="http://your-graphdb-server:7200/"
# export SPARQL_REPOSITORY="your-repository-name"
# export POSTPROCESSING_ENABLED="false"  # To disable post-processing